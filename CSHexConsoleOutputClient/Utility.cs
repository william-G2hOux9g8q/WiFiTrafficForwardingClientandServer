#define DEBUG_OUTPUT

using System.Linq;

public static class Utility
{
    public static string ToByteString(this long length)
    {
        if (length < 9999)
            return length + " B";
        double ret = length;
        ret /= 1024;
        if (ret < 1024)
            return string.Format("{0:N2} kB", ret);
        ret /= 1024;
        if (ret < 1024)
            return string.Format("{0:N2} MB", ret);
        ret /= 1024;
        if (ret < 1024)
            return string.Format("{0:N2} GB", ret);
        ret /= 1024;
        return string.Format("{0:N2} TB", ret);
    }
    public static string ToByteString(this double length)
    {
        if (length < 9999)
            return length + " B";
        double ret = length;
        ret /= 1024;
        if (ret < 1024)
            return string.Format("{0:N2} kB", ret);
        ret /= 1024;
        if (ret < 1024)
            return string.Format("{0:N2} MB", ret);
        ret /= 1024;
        if (ret < 1024)
            return string.Format("{0:N2} GB", ret);
        ret /= 1024;
        return string.Format("{0:N2} TB", ret);
    }

    public static System.Security.Cryptography.RandomNumberGenerator RandomNumberGenerator = System.Security.Cryptography.RandomNumberGenerator.Create();

    //Console.WriteLine has/used to have some issues with multithreading (possible only on Linux?)
    //to prevent these issues we make it mutually exclusive
    private static object ConsoleLock = new object();
    public static void WriteLine(string toWrite)
    {
        lock (ConsoleLock)
            System.Console.WriteLine(toWrite);
    }
    public static void WriteLine(string format, params object[] args)
    {
        lock (ConsoleLock)
            System.Console.WriteLine(string.Format(format, args));
    }
    public static void DebugWriteLine(string toWrite)
    {
#if DEBUG_OUTPUT
        WriteLine(toWrite);
#endif
    }
    public static void DebugWriteLine(string format, params object[] args)
    {
#if DEBUG_OUTPUT
        WriteLine(format, args);
#endif
    }

    public static byte[] TestBeacon = new byte[]{
        //0x00, 0x00, 0x24, 0x00, 0x2f, 0x40, 0x00, 0xa0, 0x20, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x87, 0x07, 0xef, 0x3a, 0x00, 0x00, 0x00, 0x00, 0x10, 0x02, 0x99, 0x09, 0xa0, 0x00, 0xa7, 0x00, 0x00, 0x00, 0xa7, 0x00, 0x80, 0x00, 0x00, 0x00, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0x0c, 0xcb, 0x85, 0xd7, 0x0f, 0x04, 0x0c, 0xcb, 0x85, 0xd7, 0x0f, 0x04, 0x30, 0x18, 0x85, 0x41, 0x5e, 0x8b, 0x30, 0x00, 0x00, 0x00, 0x64, 0x00, 0x31, 0x04, 0x00, 0x11, 0x6d, 0x6f, 0x74, 0x6f, 0x20, 0x65, 0x35, 0x20, 0x70, 0x6c, 0x75, 0x73, 0x20, 0x34, 0x39, 0x33, 0x34, 0x01, 0x04, 0x82, 0x84, 0x8b, 0x96, 0x03, 0x01, 0x09, 0x05, 0x09, 0x01, 0x02, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x07, 0x24, 0x55, 0x53, 0x20, 0x01, 0x01, 0x17, 0x02, 0x01, 0x17, 0x03, 0x01, 0x17, 0x04, 0x01, 0x17, 0x05, 0x01, 0x17, 0x06, 0x01, 0x17, 0x07, 0x01, 0x17, 0x08, 0x01, 0x17, 0x09, 0x01, 0x17, 0x0a, 0x01, 0x16, 0x0b, 0x01, 0x16, 0x2a, 0x01, 0x00, 0x32, 0x08, 0x0c, 0x12, 0x18, 0x24, 0x30, 0x48, 0x60, 0x6c, 0x30, 0x14, 0x01, 0x00, 0x00, 0x0f, 0xac, 0x04, 0x01, 0x00, 0x00, 0x0f, 0xac, 0x04, 0x01, 0x00, 0x00, 0x0f, 0xac, 0x02, 0x0c, 0x00, 0x2d, 0x1a, 0x2c, 0x01, 0x03, 0xff, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x3d, 0x16, 0x09, 0x00, 0x11, 0x00, 0x00, 0x02, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xdd, 0x18, 0x00, 0x50, 0xf2, 0x02, 0x01, 0x01, 0x81, 0x00, 0x03, 0xa4, 0x00, 0x00, 0x27, 0xa4, 0x00, 0x00, 0x42, 0x43, 0x5e, 0x00, 0x62, 0x32, 0x2f, 0x00, 0x26, 0x22, 0x56, 0xa2
        //0     1    2         4
        0x00,0x00,0x24,0x00,0x2F,
        0x40,0x00,0xA0,0x20,0x08,//5
        0x00,0x00,0x00,0x00,0x00,//10
        0x00,0x87,0x07,0xEF,0x3A,//15
        0x00,0x00,0x00,0x00,0x10,//20
        0x02,0x99,0x09,0xA0,0x00,//25
        0xA7,0x00,0x00,0x00,0xA7,//30
        0x00,0x80,0x00,0x00,0x00,//35
        0xFF,0xFF,0xFF,0xFF,0xFF,//40
        //45   46   47   48   49
        0xFF,0x0C,0xCB,0x85,0xD7,
        //50   51
        0x0F,0x04,0x0C,0xCB,0x85,//55
        0xD7,0x0F,0x04,0x30,0x18,//60
        0x85,0x41,0x5E,0x8B,0x30,//65
        0x00,0x00,0x00,0x64,0x00,//70
        0x31,0x04,0x00,0x11,0x42,//75
        0x65,0x61,0x63,0x6F,0x6E,//80
        0x20,0x30,0x30,0x30,0x30,//85
        0x30,0x30,0x30,0x30,0x30,//90
        0x30,0x01,0x04,0x82,0x84,//95
        0x8B,0x96,0x03,0x01,0x09,0x05,0x09,0x01,0x02,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x07,0x24,0x55,0x53,0x20,0x01,0x01,0x17,0x02,0x01,0x17,0x03,0x01,0x17,0x04,0x01,0x17,0x05,0x01,0x17,0x06,0x01,0x17,0x07,0x01,0x17,0x08,0x01,0x17,0x09,0x01,0x17,0x0A,0x01,0x16,0x0B,0x01,0x16,0x2A,0x01,0x00,0x32,0x08,0x0C,0x12,0x18,0x24,0x30,0x48,0x60,0x6C,0x30,0x14,0x01,0x00,0x00,0x0F,0xAC,0x04,0x01,0x00,0x00,0x0F,0xAC,0x04,0x01,0x00,0x00,0x0F,0xAC,0x02,0x0C,0x00,0x2D,0x1A,0x2C,0x01,0x03,0xFF,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x3D,0x16,0x09,0x00,0x11,0x00,0x00,0x02,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0xDD,0x18,0x00,0x50,0xF2,0x02,0x01,0x01,0x81,0x00,0x03,0xA4,0x00,0x00,0x27,0xA4,0x00,0x00,0x42,0x43,0x5E,0x00,0x62,0x32,0x2F,0x00,0x81,0x19,0x8E,0x35
        //0x80,0x00,0x00,0x00,0xff,0xff,0xff,0xff,0xff,0xff,0x66,0x5d,0x86,0xbd,0x19,0x38,0x66,0x5d,0x86,0xbd,0x19,0x38,0x30,0xd5,0x35,0x31,0x96,0x9d,0x00,0x00,0x00,0x00,0x64,0x00,0x31,0x87,0x00,0x19,0x44,0x49,0x52,0x45,0x43,0x54,0x2d,0x30,0x30,0x30,0x30,0x30,0x30,0x30,0x30,0x30,0x30,0x30,0x30,0x30,0x30,0x30,0x30,0x30,0x30,0x01,0x08,0x8c,0x12,0x98,0x24,0xb0,0x48,0x60,0x6c,0x03,0x01,0x01,0x05,0x04,0x01,0x03,0x00,0x00,0x2a,0x01,0x00,0x2d,0x1a,0xa5,0x09,0x17,0xff,0xff,0xff,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x30,0x14,0x01,0x00,0x00,0x0f,0xac,0x04,0x01,0x00,0x00,0x0f,0xac,0x04,0x01,0x00,0x00,0x0f,0xac,0x02,0x0c,0x00,0x3b,0x02,0x51,0x51,0x3d,0x16,0x01,0x08,0x03,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x7f,0x0a,0x04,0x00,0x80,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0xdd,0x18,0x00,0x50,0xf2,0x02,0x01,0x01,0x00,0x00,0x03,0xa4,0x00,0x00,0x27,0xa4,0x00,0x00,0x42,0x43,0x5e,0x00,0x62,0x32,0x2f,0x00,0xdd,0x60,0x00,0x50,0xf2,0x04,0x10,0x4a,0x00,0x01,0x10,0x10,0x44,0x00,0x01,0x02,0x10,0x49,0x00,0x06,0x00,0x37,0x2a,0x00,0x01,0x20,0x10,0x54,0x00,0x08,0x00,0x07,0x00,0x50,0xf2,0x00,0x00,0x00,0x10,0x11,0x00,0x0c,0x45,0x47,0x48,0x31,0x2d,0x34,0x52,0x30,0x54,0x4d,0x51,0x32,0x10,0x49,0x00,0x28,0x00,0x01,0x37,0x20,0x01,0x00,0x01,0x07,0x20,0x02,0x00,0x0c,0x45,0x47,0x48,0x31,0x2d,0x34,0x52,0x30,0x54,0x4d,0x51,0x32,0x20,0x05,0x00,0x0c,0x31,0x30,0x2e,0x37,0x32,0x2e,0x32,0x30,0x2e,0x31,0x30,0x36,0xdd,0x0d,0x50,0x6f,0x9a,0x0a,0x00,0x00,0x06,0x00,0x11,0x1c,0x44,0x00,0x06,0xdd,0x12,0x50,0x6f,0x9a,0x09,0x02,0x02,0x00,0x25,0x8b,0x03,0x06,0x00,0x64,0x5d,0x86,0xbd,0x19,0x39
        //0x80,0x00,0x00,0x00,0xff,0xff,0xff,0xff,0xff,0xff,0x66,0x5d,0x86,0xbd,0x19,0x38,0x66,0x5d,0x86,0xbd,0x19,0x38,0x30,0xd5,0x35,0x31,0x96,0x9d,0x00,0x00,0x00,0x00,0x64,0x00,0x31,0x87,0x00,0x19,0x44,0x49,0x52,0x45,0x43,0x54,0x2d,0x44,0x75,0x45,0x47,0x48,0x31,0x2d,0x34,0x52,0x30,0x54,0x4d,0x51,0x32,0x6d,0x73,0x56,0x45,0x01,0x08,0x8c,0x12,0x98,0x24,0xb0,0x48,0x60,0x6c,0x03,0x01,0x01,0x05,0x04,0x01,0x03,0x00,0x00,0x2a,0x01,0x00,0x2d,0x1a,0xa5,0x09,0x17,0xff,0xff,0xff,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x30,0x14,0x01,0x00,0x00,0x0f,0xac,0x04,0x01,0x00,0x00,0x0f,0xac,0x04,0x01,0x00,0x00,0x0f,0xac,0x02,0x0c,0x00,0x3b,0x02,0x51,0x51,0x3d,0x16,0x01,0x08,0x03,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x7f,0x0a,0x04,0x00,0x80,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0xdd,0x18,0x00,0x50,0xf2,0x02,0x01,0x01,0x00,0x00,0x03,0xa4,0x00,0x00,0x27,0xa4,0x00,0x00,0x42,0x43,0x5e,0x00,0x62,0x32,0x2f,0x00,0xdd,0x60,0x00,0x50,0xf2,0x04,0x10,0x4a,0x00,0x01,0x10,0x10,0x44,0x00,0x01,0x02,0x10,0x49,0x00,0x06,0x00,0x37,0x2a,0x00,0x01,0x20,0x10,0x54,0x00,0x08,0x00,0x07,0x00,0x50,0xf2,0x00,0x00,0x00,0x10,0x11,0x00,0x0c,0x45,0x47,0x48,0x31,0x2d,0x34,0x52,0x30,0x54,0x4d,0x51,0x32,0x10,0x49,0x00,0x28,0x00,0x01,0x37,0x20,0x01,0x00,0x01,0x07,0x20,0x02,0x00,0x0c,0x45,0x47,0x48,0x31,0x2d,0x34,0x52,0x30,0x54,0x4d,0x51,0x32,0x20,0x05,0x00,0x0c,0x31,0x30,0x2e,0x37,0x32,0x2e,0x32,0x30,0x2e,0x31,0x30,0x36,0xdd,0x0d,0x50,0x6f,0x9a,0x0a,0x00,0x00,0x06,0x00,0x11,0x1c,0x44,0x00,0x06,0xdd,0x12,0x50,0x6f,0x9a,0x09,0x02,0x02,0x00,0x25,0x8b,0x03,0x06,0x00,0x64,0x5d,0x86,0xbd,0x19,0x39
    };
    public static void SendClientToPi()
    {

    }
}

//TODO: delete
/// <summary>
/// Performs 32-bit reversed cyclic redundancy checks.
/// </summary>
public class Crc32
{
    #region Constants
    /// <summary>
    /// Generator polynomial (modulo 2) for the reversed CRC32 algorithm. 
    /// </summary>
    private const System.UInt32 s_generator = 0xEDB88320;
    #endregion

    #region Constructors
    /// <summary>
    /// Creates a new instance of the Crc32 class.
    /// </summary>
    public Crc32()
    {
        // Constructs the checksum lookup table. Used to optimize the checksum.
        m_checksumTable = System.Linq.Enumerable.Range(0, 256).Select(i =>
        {
            var tableEntry = (uint)i;
            for (var j = 0; j < 8; ++j)
            {
                tableEntry = ((tableEntry & 1) != 0)
                    ? (s_generator ^ (tableEntry >> 1))
                    : (tableEntry >> 1);
            }
            return tableEntry;
        }).ToArray();
    }
    #endregion

    #region Methods
    /// <summary>
    /// Calculates the checksum of the byte stream.
    /// </summary>
    /// <param name="byteStream">The byte stream to calculate the checksum for.</param>
    /// <returns>A 32-bit reversed checksum.</returns>
    public System.UInt32 Get<T>(System.Collections.Generic.IEnumerable<T> byteStream)
    {
        try
        {
            // Initialize checksumRegister to 0xFFFFFFFF and calculate the checksum.
            return ~byteStream.Aggregate(0xFFFFFFFF, (checksumRegister, currentByte) =>
                      (m_checksumTable[(checksumRegister & 0xFF) ^ System.Convert.ToByte(currentByte)] ^ (checksumRegister >> 8)));
        }
        catch (System.FormatException e)
        {
            throw new System.Exception("Could not read the stream out as bytes.", e);
        }
        catch (System.InvalidCastException e)
        {
            throw new System.Exception("Could not read the stream out as bytes.", e);
        }
        catch (System.OverflowException e)
        {
            throw new System.Exception("Could not read the stream out as bytes.", e);
        }
    }
    #endregion

    #region Fields
    /// <summary>
    /// Contains a cache of calculated checksum chunks.
    /// </summary>
    private readonly System.UInt32[] m_checksumTable;

    #endregion
}